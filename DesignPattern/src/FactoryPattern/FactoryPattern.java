package FactoryPattern;

/*
 * 느슨한 결합을 이요한느 객체지향 디자인
 * 팩토리패턴 - 바뀌는 부분을 캡슐화하라
 * 팩토리 메소드 패턴 - 팩토리 메소드 패턴에서는 객체를 생성하기 위한 인터페이스를 정의하는데 어떤 클래스의 인스턴스를 만들자
 * 추상 팩토리 패턴 정의 - 인터페이스를 이용하여 서로 연관된, 또는 의존하는 객체를 구상 클래스를 지정하지 않고도 생성할 수 있다.
 * 서브클래스에서 결하게 만듬, 팩토리 메소드 패턴을 이용하면 클래스의 인스턴스를 만드는 일을 서브클래스에 맡길수 있음.
 * 
 * 구상클래스의 인스턴스를 만드는 부분을 전부 찾아내서 애플리케이션의 나머지 부분으로부터 분리/캡슐화시킬 수 있는 방법은? 객체에 팩토리를 만들자
 * 팩토리 패턴에서는 객체 생성을 캡슐화한다. 팩토리 메소드 패턴에 서브클래스에서 어떤 클래스를 만들지를 결정하게 함으로써 객체 생성을 캡슐화한다.
 * 제품, 생산자 두개의 클래스가 있다고 가정하면, 각 각의 클래스의 계층구도를 병렬적으로 나열해볼것
 * 
 * 위존성 뒤집기 원칙 - 추상화된 것에 의존하도록 만들어라. 구상 클래스에 의존하도록 만들지 않도록 한다.
 * 팩토리 패턴 vs 추상 팩토리 패턴
 *  - 팩토리 메소드는 상속을 통해서 객체를 만든다. 클래스를 분리할 때 유용하다.  -> 객체를 생성하기 위한 인터페이스를 만든다. 어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정하도록 한다. 
 *  - 팩토리 메소드를 이용하면 인스턴스를 만드는 일을 서브클래소 미룰 수 있다.
 *  - 추상 팩토리패턴은 객체 구성을 통해서 만든다. 서브클래스에서 정의된다. 인터페이스를 통해서 구현한다. 
 *  
 *  공통점은  객체 생성을 캡슐화해서 애플리케이션의 결합을 느슨하게 만들고 특정 구현에 덜 의존하도록 만들 수 있다. -> 서로 연관된, 또는 외존적인 객체들로 이루어진 제품군을 생성하기위한
 *  - 인터페이스를 제공. 구상 클래스는 서브클래스에 의해 만드렁짐 
 *  
 *  객체지향 원칙
 *  - 바뀌는 부분은 캡슐화한다.
 *  - 상속보다는 구성을 활용한다.
 *  - 구현이 아닌 인터페이스에 맞춰서 프로그래밍한다.
 *  - 서로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인을 사용해야한다.
 *  - 클래스는 확장에 대해서는 열려 있지만 변경에 대허서는 닫혀 있어야 한다.
 *  - 추상화딘 것에 의존하라. 구상 클래스에 의존하지 않도록 한다.
 * 
 *  */
public class FactoryPattern {


}
